1.惰性求值方法 eg: Filter
    在对 集合使用 stream操作后,将数据类型转换成 Stream<E> 类型,  使用 filter()方法后    Stream<T> filter(Predicate<? super T> predicate);
    返回的 是 Stream<E> 类型的数据, 但是并没有产生新的集合, 像 "filter" 这样只描述 Stream 而不产生新集合 的方法 就叫做 惰性求值方法。‘
    ①TestStream 中 例4

2. 及早求值方法 eg: count()丶 forEach()
    想count() 这样的方法 public final long count()   最终 从Stream 中得到 某一个值 的方法 就称之为 及早求值方法。

3.如何判断是 惰性求值 还是 及早求值
    stream 会使用 类似于 Filter 丶Count 等方法 , 我们只用 看最终的返回值 是 Stream 就是 惰性求值, 如果返回 一个值 或者空, 则就是 及早求值
    ①TestStream 中 例4


常用流操作
1. Stream.of("a","b","c")   使用 Stream.of() 方法 , 将集合 转成 Stream 对象.
2. collect(Collectors.toList()) 方法
   对Stream 使用许多操作后,可能得到的是惰性求值, 如果是惰性求值的话,并不能对结果进行输出等操作, 需要使用及早求值方法 得到及早求值,除了 Count方法 外 还有 collect(Collectors.toList())
   来完成 及早求值的转换.

3.map操作 (惰性求值方法)
    map可以将一种类型的值转换成另外一种类型的值,将一个流中的值准换成新的流
    map中返回的值,不一定需要 和输入的值一样,只需要里面的Lambda 表达式必须是Function 接口的一个实例即可

