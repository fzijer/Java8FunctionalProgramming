1.java8 另一个变化就是引入了“默认方法” 和 “接口的静态方法”

2.从类库角度来看,在使用内置的Supplier函数 接口时, 他只有一个get 方法 通过调用 get方法将结果传递给其他方法，
  不同的接口函数中有不同的方法,如果使用Predicate 就应该调用test方法,如果使用Function 就应该调用 apply方法


3.高阶函数
    高阶函数是指接受另外一个函数作为参数，或返回一个函数的函数。什么样的参数是函数类型的参数？
    要看该参数是否是一个函数式接口，函数式接口只会有一个方法，会使用 @FunctionalInterface 这个注解来修饰。
    ①Stream 的 limit 是高阶函数吗？是的。因为它的返回值是一个Stream。
      Stream<Integer> onlyTwoNumbers = Stream.of(-1, -2, 0, -5).limit(2);
    ②Stream 的 anyMatch 是高阶函数吗？是的。因为它的参数接收的是另外一个函数：Predicate。
      boolean greaterThanZero = Stream.of(-1, -2, 0, -5).anyMatch(num -> num > 0);


4.基本类型
    在Java8中仅对 整型丶长整型丶双浮点型做了特殊处理
    CSDN:   https://blog.csdn.net/Mark_Chao/article/details/80834523

    Stream中 有如下三种Stream的装箱操作

        ①mapToInt           IntStream mapToInt(ToIntFunction<? super T> mapper);            //传入ToIntFunction   得到 IntStream 类型
            将数据转成IntStream类型,避免装箱操作, IntStream 中有
            map   IntStream map(IntUnaryOperator mapper);           //传入 IntUnaryOperator 得到IntStream类型
            sum 丶
            summaryStatistics 丶
            mapToObj   <U> Stream<U> mapToObj(IntFunction<? extends U> mapper); 等方法         //传入IntFunction  得到一个装箱后的Stream  Stream<Long>

        ②mapToDouble        DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper);
        ③mapToLong          LongStream mapToLong(ToLongFunction<? super T> mapper);


5.重载解析
    Java中可以重载方法,造成多个方法有相同的方法名,但是签名不一样,但是在推断参数类型时会带来问题.应为系统可能会推出多种类型,
    什么是重载解析呢？ 我们要解释重载解析就要先了解重载。当我们对同一个函数名写了不同参数列表的版本之后，编译器会生成这个函数
    的不同重载版本。那么当我们调用这个函数的时候，编译器就会子自动根据实参的参数类型来判断到底调用的是哪个版本的函数。那么编译
    器选取最合适的函数版本的这一个过程就被称为重载解析。

    CSDN:  https://blog.csdn.net/y1196645376/article/details/52860006
    Lambda表达式的类型就是对应的函数接口类型